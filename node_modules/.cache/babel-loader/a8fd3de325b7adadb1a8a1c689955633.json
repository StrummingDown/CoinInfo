{"ast":null,"code":"var _jsxFileName = \"/Users/yundaegyu/Desktop/CoinInfo/src/pages/Exchange.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { exchange } from \"../components/api\";\nimport { useState, useEffect } from \"react\";\nimport { Loading } from \"../components/Loading\";\nimport { Exchanges } from \"../components/Exchanges\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Exchange = () => {\n  _s();\n\n  let [exchanges, setExchanges] = useState([]);\n  let [loading, setLoading] = useState(false);\n\n  async function fetchData() {\n    let exchangeS = await exchange();\n    exchangeS = exchangeS.slice(0, 500);\n    exchangeS = exchangeS.filter(el => {\n      if (el.links && el.links.website) return el;\n    });\n    exchangeS = exchangeS.filter(el => {\n      if (el.description) return el;\n    });\n    setExchanges(exchangeS);\n  }\n\n  useEffect(() => {\n    setLoading(true);\n    fetchData();\n    setTimeOut(2000, setLoading(false));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this) : exchanges.map(exchange => /*#__PURE__*/_jsxDEV(Exchanges, {\n      exchange: exchange\n    }, exchange.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Exchange, \"ghahDGu4vFLB0BsdXBq4h9woS70=\");\n\n_c = Exchange;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exchange\");","map":{"version":3,"sources":["/Users/yundaegyu/Desktop/CoinInfo/src/pages/Exchange.js"],"names":["React","exchange","useState","useEffect","Loading","Exchanges","Exchange","exchanges","setExchanges","loading","setLoading","fetchData","exchangeS","slice","filter","el","links","website","description","setTimeOut","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AAC5B,MAAI,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,EAAD,CAAxC;AACA,MAAI,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAApC;;AACA,iBAAeS,SAAf,GAA2B;AACzB,QAAIC,SAAS,GAAG,MAAMX,QAAQ,EAA9B;AACAW,IAAAA,SAAS,GAAGA,SAAS,CAACC,KAAV,CAAgB,CAAhB,EAAmB,GAAnB,CAAZ;AACAD,IAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAkBC,EAAD,IAAQ;AACnC,UAAIA,EAAE,CAACC,KAAH,IAAYD,EAAE,CAACC,KAAH,CAASC,OAAzB,EAAkC,OAAOF,EAAP;AACnC,KAFW,CAAZ;AAGAH,IAAAA,SAAS,GAAGA,SAAS,CAACE,MAAV,CAAkBC,EAAD,IAAQ;AACnC,UAAIA,EAAE,CAACG,WAAP,EAAoB,OAAOH,EAAP;AACrB,KAFW,CAAZ;AAGAP,IAAAA,YAAY,CAACI,SAAD,CAAZ;AACD;;AACDT,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAC,IAAAA,SAAS;AAETQ,IAAAA,UAAU,CAAC,IAAD,EAAOT,UAAU,CAAC,KAAD,CAAjB,CAAV;AACD,GALQ,EAKN,EALM,CAAT;AAOA,sBACE;AAAA,cAEGD,OAAO,gBACN,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADM,GAGNF,SAAS,CAACa,GAAV,CAAenB,QAAD,iBACZ,QAAC,SAAD;AAA6B,MAAA,QAAQ,EAAEA;AAAvC,OAAgBA,QAAQ,CAACoB,EAAzB;AAAA;AAAA;AAAA;AAAA,YADF;AALJ;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAjCM;;GAAMf,Q;;KAAAA,Q","sourcesContent":["import React from \"react\";\nimport { exchange } from \"../components/api\";\nimport { useState, useEffect } from \"react\";\nimport { Loading } from \"../components/Loading\";\nimport { Exchanges } from \"../components/Exchanges\";\n\nexport const Exchange = () => {\n  let [exchanges, setExchanges] = useState([]);\n  let [loading, setLoading] = useState(false);\n  async function fetchData() {\n    let exchangeS = await exchange();\n    exchangeS = exchangeS.slice(0, 500);\n    exchangeS = exchangeS.filter((el) => {\n      if (el.links && el.links.website) return el;\n    });\n    exchangeS = exchangeS.filter((el) => {\n      if (el.description) return el;\n    });\n    setExchanges(exchangeS);\n  }\n  useEffect(() => {\n    setLoading(true);\n    fetchData();\n\n    setTimeOut(2000, setLoading(false));\n  }, []);\n\n  return (\n    <div>\n      {/* {console.log(exchanges)} */}\n      {loading ? (\n        <Loading />\n      ) : (\n        exchanges.map((exchange) => (\n          <Exchanges key={exchange.id} exchange={exchange} />\n        ))\n      )}\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}